<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/cadastrocliente.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>Cadastro Cliente</title>
</head>
<body>

    <nav class="container">
        <nav class="hero">
            <a href="/cadastroinicial" class="material-symbols-outlined">
                keyboard_backspace
            </a>
            <h2>Venha fazer negócios conosco!</h2>
            <img src="/imagens/pexels-tomfisk-9893729.jpg" alt="">
        </nav>
        <main>
            <form action="/cadastrocliente" method="POST" id="cadastroForm">
                <nav class="logo"></nav>
                <nav class="input-group">
                    <input type="hidden" name="tipo_usuario" value="1"> <!-- 1 para cliente, pode ser mudado dinamicamente -->
                    <input type="text" name="nome_cliente" placeholder="Nome Completo" required>
                    <input type="text" name="cpf_cliente" id="cpf_cliente" size="30" maxlength="14" placeholder="CPF" required>
            
                </nav>
                <nav class="input-group">
                    <input type="text" name="cep_cliente" placeholder="CEP"maxlength="9" placeholder="00000-000" oninput="mascaraCep(this)" required>
                </nav>
                <nav class="input-group">
                    <input type="email" name="email_cliente" placeholder="E-mail" required>
                    <input type="tel" id="contato_cliente" name="contato_cliente" placeholder="Contato (00) 00000-0000" required>
                </nav>
                <nav class="input-group">
                    <nav class="password-container">
                        <input type="password" id="password" placeholder="Senha" onfocus="showMessage()" onblur="hideMessage()" oninput="validatePassword()">
                       
                        <nav id="message" class="invalid">A senha deve ter pelo menos 8 caracteres, uma letra maiúscula e um caractere especial.</nav>
                    </nav>                    
                    <nav class="password-container">
                        <input type="password" id="senha_cliente" name="senha_cliente" placeholder="Confirme sua senha" required>
                    </nav>
                </nav>                
                <button type="submit">Criar Conta</button>
            </form>
        </main>
    </nav>
    <script>
<<<<<<< HEAD
        function togglePassword() {
    const passwordInput = document.getElementById('password');
    const passwordType = passwordInput.type === 'password' ? 'text' : 'password';
    passwordInput.type = passwordType;

    const toggleIcon = document.getElementById('togglePassword');
    toggleIcon.innerText = passwordType === 'password' ? 'visibility' : 'visibility_off';
}

=======
        // Validação de senha (mantida)
>>>>>>> 4854f3d (atualizar)
        function showMessage() {
            document.getElementById('message').style.display = 'block';
        }
    
        function hideMessage() {
            document.getElementById('message').style.display = 'none';
        }
    
        function validatePassword() {
            const password = document.getElementById('password').value;
            const message = document.getElementById('message');
            const isValid = validatePasswordCriteria(password);
            message.className = isValid ? 'valid' : 'invalid';
            message.innerText = isValid ? 'Senha válida' : 'A senha deve ter pelo menos 8 caracteres, uma letra maiúscula e um caractere especial.';
        }
    
        function validatePasswordCriteria(password) {
            const lengthCriteria = password.length >= 8;
            const upperCaseCriteria = /[A-Z]/.test(password);
            const specialCharCriteria = /[!@#$%^&*(),.?":{}|<>]/.test(password);
            return lengthCriteria && upperCaseCriteria && specialCharCriteria;
        }
    
        // Máscara para telefone
        function applyPhoneMask(value) {
            return value
                .replace(/\D/g, '') // Remove tudo que não é dígito
                .replace(/^(\d{2})(\d)/, '($1) $2')
                .replace(/(\d{5})(\d)/, '$1-$2')
                .replace(/(\d{5})(\d{1,4})$/, '$1-$2');
        }
    
        // Máscara para CPF
        function applyCPFMask(value) {
            return value
                .replace(/\D/g, '') // Remove tudo que não é dígito
                .replace(/(\d{3})(\d)/, '$1.$2')
                .replace(/(\d{3})(\d)/, '$1.$2')
                .replace(/(\d{3})(\d{1,2})$/, '$1-$2');
        }
    
        // Máscara para CEP
        function mascaraCep(input) {
            let cep = input.value.replace(/\D/g, ""); // Remove tudo que não é número
            if (cep.length > 5) {
                cep = cep.replace(/^(\d{5})(\d)/, "$1-$2"); // Aplica a máscara 00000-000
            }
            input.value = cep; // Atualiza o valor do input
        }
    
        // Função para validar os campos e exibir mensagem de erro
        function validateField(field, message) {
            if (field.value === '') {
                field.classList.add('error'); // Adiciona a classe de erro (vermelho)
                field.nextElementSibling.innerText = message; // Mostra a mensagem de erro
                return false;
            } else {
                field.classList.remove('error'); // Remove a classe de erro
                field.nextElementSibling.innerText = ''; // Remove a mensagem de erro
                return true;
            }
        }
    
        // Validação dos campos ao enviar o formulário
        function validateForm(event) {
            event.preventDefault(); // Impede o envio do formulário
            const cpf = document.getElementById('cpf_cliente');
            const contato = document.getElementById('contato_cliente');
            const cep = document.getElementById('cep_cliente');
    
            let validCpf = validateField(cpf, 'CPF inválido.');
            let validContato = validateField(contato, 'Contato inválido.');
            let validCep = validateField(cep, 'CEP inválido.');
    
            // Se todos os campos estiverem válidos, o formulário é enviado
            if (validCpf && validContato && validCep) {
                alert('Formulário enviado com sucesso!');
            }
        }
    
        // Aplicando máscaras e validação ao carregar a página
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('cpf_cliente').addEventListener('input', function () {
                this.value = applyCPFMask(this.value);
            });
    
            document.getElementById('contato_cliente').addEventListener('input', function () {
                this.value = applyPhoneMask(this.value);
            });
    
            document.getElementById('cep_cliente').addEventListener('input', function () {
                mascaraCep(this);
            });
    
            document.getElementById('form').addEventListener('submit', validateForm);
        });
    </script>
    
    <style>
        .error {
            border-color: red;
        }
        
        .error + span {
            color: red;
            font-size: 12px;
        }
    
        .valid {
            color: green;
        }
    
        .invalid {
            color: red;
        }
    </style>
    
</body>
</html>
