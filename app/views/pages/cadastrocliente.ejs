<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/cadastrocliente.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>Cadastro Cliente</title>
    <style>
        .error-message {
            color: red;
            display: none; /* Inicialmente oculta */
            font-size: 12px;
        }
        .valid {
            color: green;
        }
        .invalid {
            color: red;
        }
    </style>
</head>
<body>

    <nav class="container">
        <nav class="hero">
            <a href="/cadastroinicial" class="material-symbols-outlined">
                keyboard_backspace
            </a>
            <h2>Venha fazer negócios conosco!</h2>
            <img src="/imagens/pexels-tomfisk-9893729.jpg" alt="">
        </nav>
        <main>
            <form action="/cadastrocliente" method="POST" id="cadastroForm">
                <nav class="logo"></nav>
                <nav class="input-group">
                    <input type="hidden" name="tipo_usuario" value="1"> <!-- 1 para cliente -->
                    <input type="text" name="nome_cliente" placeholder="Nome Completo" required>
                    <input type="text" name="cpf_cliente" id="cpf_cliente" size="30" maxlength="14" placeholder="CPF" required>
                    <div id="cpf-error" class="error-message">CPF inválido. Verifique e tente novamente.</div>
                </nav>
                <nav class="input-group">
                    <input type="text" name="cep_cliente" placeholder="CEP" maxlength="9" oninput="mascaraCep(this)" required>
                </nav>
                <nav class="input-group">
                    <input type="email" name="email_cliente" id="email_cliente" placeholder="E-mail" required>
                    <div id="email-error" class="error-message">Este e-mail já está em uso.</div>
                    <input type="tel" id="contato_cliente" name="contato_cliente" placeholder="Contato (00) 00000-0000" required>
                </nav>
                <nav class="input-group">
                    <nav class="password-container">
                        <input type="password" id="password" placeholder="Senha" onfocus="showMessage()" onblur="hideMessage()" oninput="validatePassword()" oncopy="return false;" onpaste="return false;">
                        <nav id="message" class="invalid">A senha deve ter pelo menos 8 caracteres, uma letra maiúscula e um caractere especial.</nav>
                    </nav>                    
                    <nav class="password-container">
                        <input type="password" id="senha_cliente" name="senha_cliente" placeholder="Confirme sua senha" required oncopy="return false;" onpaste="return false;">
                        <nav id="error-message" class="error-message">As senhas não coincidem.</nav>
                    </nav>
                </nav>                
                <button type="submit">Criar Conta</button>
            </form>
        </main>
    </nav>

    <script>
        document.getElementById('cadastroForm').addEventListener('submit', function(event) {
            const password = document.getElementById('senha_cliente').value;
            const confirmPassword = document.getElementById('password').value;
            const errorMessage = document.getElementById('error-message');
            const emailError = document.getElementById('email-error');
            const cpfError = document.getElementById('cpf-error');
            const emailInput = document.getElementById('email_cliente').value;
            const cpfInput = document.getElementById('cpf_cliente').value;

            // Reseta as mensagens de erro
            errorMessage.style.display = 'none';
            emailError.style.display = 'none';
            cpfError.style.display = 'none';

            // Lógica simulada para verificar se o e-mail já está em uso
            const existingEmails = ["teste@example.com", "user@example.com"]; // Exemplo de e-mails existentes

            if (existingEmails.includes(emailInput)) {
                emailError.style.display = 'block'; // Exibe mensagem se o e-mail já estiver em uso
                event.preventDefault(); // Impede o envio do formulário
            } else if (!validarCPF(cpfInput)) {
                cpfError.style.display = 'block'; // Exibe a mensagem de erro para CPF
                event.preventDefault(); // Impede o envio do formulário
            } else if (password !== confirmPassword) {
                errorMessage.style.display = 'block'; // Exibe a mensagem de erro
                event.preventDefault(); // Impede o envio do formulário
            } else {
                event.preventDefault(); // Impede o envio padrão para simulação
                // Simulando o envio do formulário com sucesso
                setTimeout(() => {
                    window.location.href = '/'; // Redireciona para a home
                }, 1000); // 1 segundo de delay para simular o processamento
            }
        });

        // Função para validar o CPF
        function validarCPF(cpf) {
            cpf = cpf.replace(/\D/g, ''); // Remove caracteres não numéricos

            if (cpf.length !== 11 || /^(.)\1{10}$/.test(cpf)) {
                return false; // CPF deve ter 11 dígitos e não pode ser todos iguais
            }

            let soma = 0;
            let resto;

            // Validação do primeiro dígito verificador
            for (let i = 1; i <= 9; i++) {
                soma += parseInt(cpf[i - 1]) * (11 - i);
            }
            resto = (soma * 10) % 11;
            if (resto === 10 || resto === 11) {
                resto = 0;
            }
            if (resto !== parseInt(cpf[9])) {
                return false; // Primeiro dígito verificador inválido
            }

            soma = 0;
            // Validação do segundo dígito verificador
            for (let i = 1; i <= 10; i++) {
                soma += parseInt(cpf[i - 1]) * (12 - i);
            }
            resto = (soma * 10) % 11;
            if (resto === 10 || resto === 11) {
                resto = 0;
            }
            return resto === parseInt(cpf[10]); // Retorna se o segundo dígito verificador é válido
        }

        document.getElementById('senha_cliente').addEventListener('input', function() {
            const password = this.value; // Valor do campo de confirmar senha
            const confirmPassword = document.getElementById('password').value; // Valor do campo de senha
            const errorMessage = document.getElementById('error-message');

            // Mostra a mensagem se as senhas não coincidirem
            if (password && password !== confirmPassword) {
                errorMessage.style.display = 'block'; // Exibe a mensagem de erro
            } else {
                errorMessage.style.display = 'none'; // Oculta a mensagem de erro
            }
        });

        // Validação de senha
        function showMessage() {
            document.getElementById('message').style.display = 'block';
        }
    
        function hideMessage() {
            document.getElementById('message').style.display = 'none';
        }
    
        function validatePassword() {
            const password = document.getElementById('password').value;
            const message = document.getElementById('message');
            const isValid = validatePasswordCriteria(password);
            message.className = isValid ? 'valid' : 'invalid';
            message.innerText = isValid ? 'Senha válida' : 'A senha deve ter pelo menos 8 caracteres, uma letra maiúscula e um caractere especial.';
        }
    
        function validatePasswordCriteria(password) {
            const lengthCriteria = password.length >= 8;
            const upperCaseCriteria = /[A-Z]/.test(password);
            const specialCharCriteria = /[!@#$%^&*(),.?":{}|<>]/.test(password);
            return lengthCriteria && upperCaseCriteria && specialCharCriteria;
        }

        // Máscara para telefone
        function applyPhoneMask(value) {
            return value
                .replace(/\D/g, '') // Remove tudo que não é dígito
                .replace(/^(\d{2})(\d)/, '($1) $2')
                .replace(/(\d{5})(\d)/, '$1-$2')
                .replace(/(\d{5})(\d{1,4})$/, '$1-$2');
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('cpf_cliente').addEventListener('input', function() {
                this.value = applyCPFMask(this.value);
            });

            document.getElementById('contato_cliente').addEventListener('input', function() {
                this.value = applyPhoneMask(this.value);
            });
        });

        function mascaraCep(input) {
            let cep = input.value.replace(/\D/g, ""); // Remove tudo que não é número
            if (cep.length > 5) {
                cep = cep.replace(/^(\d{5})(\d)/, "$1-$2"); // Aplica a máscara 00000-000
            }
            input.value = cep; // Atualiza o valor do input
        }

        function applyCPFMask(value) {
            return value
                .replace(/\D/g, '') // Remove tudo que não é dígito
                .replace(/(\d{3})(\d)/, '$1.$2')
                .replace(/(\d{3})(\d)/, '$1.$2')
                .replace(/(\d{3})(\d{1,2})$/, '$1-$2');
        }
    </script>
</body>
</html>
